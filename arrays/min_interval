/* Find Minimum Interval in a given list of intervals */
/* Sum of all the unique intervals */
/* Example : {{1,4},{6,8},{2,4},{7,9},{10,15}}; 
/* Output : 11 */


#include<stdio.h>

int cmpfnc(const void *a, const void *b){
    
    const int *p = *(const int **)a;
    const int *q = *(const int **)b;
    return *p - *q;
    
}

void intervals(int **arr, int Size){
    
    qsort(arr, Size, sizeof(arr[0]), cmpfnc);
    
    int interval = 0;
    interval = arr[0][1] - arr[0][0];
    int pmin = arr[0][0];
    int pmax = arr[0][1];
    
    for(int i = 1; i < Size; i++){
        int cmin = arr[i][0];
        int cmax = arr[i][1];
        if(cmin < pmax  &&  cmax <= pmax){
            continue;
        }
        else if(cmin < pmax && cmax > pmax){
            interval += (cmax - pmax);
        }
        else if(cmin > pmax){
            interval += (cmax - cmin);
        }
        
        pmin = cmin;
        pmax = cmax;
    }
    
    printf("Interval = %d\n", interval);
}


#define SIZE 5
#define TEST 1

int main(void) {
    int arr_init[SIZE][2] = {{1,4},{6,8},{2,4},{7,9},{10,15}};
    //int arr_init[SIZE][2] = {{1,4},{1,4},{2,8}};
    
    int **arr;
    arr = (int **)malloc(sizeof(int *)*SIZE);
    
    for(int i = 0; i < SIZE; i++){
        *(arr + i) = malloc(sizeof(int) * 2);
        arr[i][0] = arr_init[i][0];
        arr[i][1] = arr_init[i][1];
    }
    
    for(int i = 0; i < SIZE ; i++){
       printf("%d %d\n",*(*(arr + i)), *(*(arr + i) + 1));
    }
    printf("\n");
    #if TEST==1
    intervals(arr,SIZE);
    for(int i = 0; i < SIZE ; i++){
       printf("%d %d\n",*(*(arr + i)), *(*(arr + i) + 1));
    }
    #endif
    
    return 0;
}
